Done on 18.04.2017

- Installed all necessary soft (Idea, Maven, Tomcat, Git)
- Read about test app and requirements for it
- Set up project for task app: add necessary dependencies Spring, Struts
- Read about spring and struts integration
- Added resource bundle for further localization
- Created tiles templates for front-end part (header, footer, body, menu sidebar)
- Project was deployed and tested for tiles templates integration. All ok.

Planes on 19.04.2017

- Add datasource (H2 database) to project for further application test
- Add and configure context.xml in order to use tomcat connection pool
- Add Hibernate support to project (configure hibernate.cfg.xml)
- Add HibernateUtil class for getting Session factory
- Add Spring application context (configure applicationContext.xml)
- Spring will be get datasource by JNDI and use LocalSessionFactoryBean
- Add NewsForm model for Struts MVC
- Add News model
- Annotate News model by JPA annotations
- Create Service and Dao layers. Annotate them with Spring annotations for further inject in Struts from Spring IoC.

Done on 19.04.2017

- Added datasource (H2 database) to project for further application test
- Added and configure context.xml in order to use tomcat connection pool
- Added Hibernate support to project (configure hibernate.cfg.xml)
- Added HibernateUtil class for getting Session factory
- Added Spring application context (configure applicationContext.xml)
- Spring get datasource by JNDI and use LocalSessionFactoryBean
- Added NewsForm model for Struts MVC
- Added News model
- Annotate News model by JPA annotations
- Create Service and Dao layers. Annotate them with Spring annotations for further inject in Struts from Spring IoC.
- Added form for adding new news
- Implemented saving news to database through Hibernate

Planes on 20.04.2017

- Add filter for force input data encoding to UTF8
- Get news from database through Hibernate
- Output news list from database on jsp page
- Add validation for input data
- Make validation rules for input fields
- Implement interface and error messages localization on 2 language using resource bundle
- Add actions to change interface languages

Done on 20.04.2017

- Added filter for force input data encoding to UTF8
- Got news list from database through Hibernate criteria API
- Output news list from database on jsp page
- Implemented UI and error messages localization on 2 language using resource bundle
- Implemented actions to change interface language
- Added Spring integrations
- Replaced all stateless objects from Java creation on Spring beans injection

Planes on 21.04.2017

- Add validation configuration for form fields
- Make validation rules config for input's fields
- Add features for View/Edit single news
- Add feature for deleting one or more news

Done on 21.04.2017

- Added validation configuration for form's fields
- Made validation rules for all input's fields
- Output validation errors on jsp
- Added view single news after adding
- Added feature for edit and save news

Planes on 25.04.2017

Fist task application done. I used Postgres RDMS for data store
I will try to work with Oracle RDMS.
- Install Oracle in my temporary account (while i don't have my own).
- Use it for data store of my application.

Done on 25.04.2017

I install and configure Oracle on my temporary account.
I configure my application config files (hibernate.cfg.xml, context.xml) for Oracle.
At first I had a problem that column name "date" is reserved word in Oracle and I couldn't
get data from table through Hibernate. I solved it to change name of column.
After that I faced with problem that I could't insert data to database
because Oracle doesn't have autoincrement feature. I solved that problem to add sequence generator for ID column in Oracle.
And also I have to change JPA annotation for generation strategy for ID field
from GenerationType.IDENTITY to GenerationType.SEQUENCE and add to annotation the name of created sequence.
Also I add in JPA annotations name of database schema otherwise Hibernate could't detect table and sequence name.

Planes on 26.04.2017

- Read about Oracle PL/SQL
- Read more about Spring
- Read more about REST, SOAP services
- Second task

Done on 26.04.2017

- Small refactoring for First task.
- Read about Oracle PL/SQL
Language syntax for loops, conditions,  procedures, functions, triggers, best practices
- Read more about Spring with REST, SOAP services
Mappings, View and Model, View Resolvers, Response body

Planes on 27.04.2017

- Read about fundamentals of AngularJS.

Done on 27.04.2017

- Read about fundamentals of AngularJS.
Module, controller, service, fabric and invocation its in DOM.
- Began read theory "Spring in Action".
- Task 2
I implemented 2 DAO implementations for working with database through JPA and Hibernate mapping file with Named queries.
For using needed DAO implementation I use Spring and its @Qualifier annotation.
I created and configured Hibernate mapping file hbm.xml.
I faced that through HQL I couldn't insert new entity in database, only if I take it from another table. I solved it using
NativeNamed queries. With INSERT native query I had a problem for getting next ID for new entity before inserting, because Oracle
doesn't have incremented ID's field feature. I solved it use expression "sequence_name.nextval" that given me next ID.
Then I had a problem for getting current entity's ID after inserting it. I solved it through next query
"SELECT sequence_name.currval FROM dual".

Planes on 28.04.2017

- Complete Task 2
- Continue read "Spring in Action".

Done on 28.04.2017

- Completed Task 2
- Started Task 3
Configured application for using Spring dispatcher servlet.
Implemented Spring rest controller. Done all URL mappings with POST, GET methods for all base application's operations.
Controller receives json strings into body of POST requests and auto-converted it to Java objects for further service (CRUD) operations.
Controller receives Java objects from services, converted them to json format and transfer its to front-end.

Week report

- Completed Task 1
Implemented 3 layers (web, service, dao) web application uses Spring framework like IoC container for beans,
Struts framework for MVC, Hibernate for database ORM.
- Completed Task 2
Implemented 2 kinds of DAO. First uses JPA annotations, second uses Hibernate mapping file for ORM on Oracle database.
For CRUD operations use Hibernate session, Named queries and Native Named queries.
There is a possibility for changing DAO implementations through Spring abstraction.
- Started Task 3
Implemented Spring Rest controller with URL mappings. For data exchange between web and service layers used Json format.

Planes on 02.05.2017

- Implement Spring SOAP web service with basic application's operations.
- Install node.js and create basic Angular2 project in IDE
Begin read about Angular2 for front-end client implementation.

Done on 02.05.2017

- Implemented SOAP web service on Apache CFX
- Installed node.js and npm for front-end client development on Angular 2.
Implemented menu navigation and form for data input.

Planes on 03.05.2017

- Angular2
Add data transfer from front-end to back-end through REST.
Add output data from back-end part.

Done on 03.05.2017

- Angular2
Implemented form input data validation before submit
Implemented saving data from form after submit on back-end.
Implemented output data after saving on page
Implemented edit data feature
I faced with problem to send data between two servers - from node.js to tomcat, tomcat not allow request without CROS headers
and I solved with adding filter in tomcat  server.xml config CorsFilter setting.
Now I have a encoding problem with response from tomcat, tomcat response on request with headers not utf-8 and i receive
json in russian language with broken characters.


Planes on 04.05.2017

-Tomcat
Solve problem with response headers from tomcat
- Angular2
Delete data by id
Edit data by id
Output list of data on page

Done on 04.05.2017

-Tomcat
Solved problem with response encoding headers from tomcat. I added annotation to controller
produces = MediaType.APPLICATION_JSON_UTF8_VALUE
- Angular2
Implemented delete single data by id with confirmation modal dialog
Implemented output list of data on page.
Implemented view and edit data from list.

Planes on 05.05.2017

- Angular2
Add delete selected data (one or several) from list.

- Begin make authorization through Spring Security.

Done on 05.05.2017

- Angular2
Implemented delete data from list. Delete button will not available until at least one checkbox select.
Angular2 client completed.
Added dependencies and config for Spring security.

Week report

- SOAP
Implemented SOAP web services through Apache CFX
For SOAP I generate validation WSDL schema from exist entity through JAXB annotation.
I create SOAP web service interface and its implementation by using Apache CFX annotations @WebService, @WebMethod.
SOAP web service generate link where can to find WSDL schema with requirements for valid SOAP's requests at web service.

- Angular 2
I prepared environment for Angular2 development: install node.js server, package manager npm and other necessary libraries
for development.
I implemented front-end client on Angular2, which can exchange (send and receive) with my back-end server through its
REST API uses JSON format.

- Spring Security
Started the implementation of app. authorization through Spring Security framework.
I add necessary dependencies and spring config xml file.
In config file I add settings for using spring security annotations on controller's methods and EL tags for JSP pages.
I create login form for redirecting on it unauthorized users.

Planes on 10.05.2017

- Complete authorization through Spring Security
- Begin test's coverage. (Mockito and etc.)

Done on 10.05.2017

- Completed authorization through Spring Security.
Created table with user's login and table with user's authority roles (ROLE_ADMIN, ROLE_USER and ect.).
If user doesn't authorize he will be redirecting on login page. If user doesn't have rights he will be redirecting on
custom "403 access denied" page.

- Read about testing application and test coverage:
TDD, BDD practices.
Frameworks for web UI testing - Selenium, Cucumber.
Frameworks for unit testing Junit, mocks with Mockito.

Planes on 11.05.2017

- Write unit tests for application's DAO layer using Spring and Junit.
- Write unit test for application's web UI.

Done on 11.05.2017

- Test
For testing DAO layer I removed Hibernate management of transactions (hibernate.cfg.xml deleted and not using anymore)
and configure declarative transaction management by Spring and it @Transactional annotation.
For testing DAO I use in-memory database HSQLDB embedded in Spring framework, and also I created special Spring's
application context configuration only for test purpose.
I added DBUnit framework for initial database population with test data.
Implemented tests for basic DAO CRUD operations.

Planes on 12.05.2017

- Write tests for REST API with MockMVC

Done on 12.05.2017

- Written integration tests for REST API with Spring MockMVC


Week report

- Spring Security
Completed application authorization through Spring Security.
Created table with user's login/password/role_id and table with possible user's authority roles (ROLE_ADMIN, ROLE_USER and ect.).
If user doesn't authorize in application he will be redirecting on login page for authorization.
If user enter wrong login or password he will see the message about that error.
If user authorized in application but doesn't have enough rights, he will be redirecting on custom "403 access denied" page.

- Testing applications
I read about TDD, BDD practices in application development.
I wrote integration tests for DAO application layer.
For fast testing DAO I use in-memory database HSQLDB, it embedded in Spring framework. Database schema created before
each test and destroyed after, it provides a clean environment for each test.
Also I created special Spring's application context configuration only for test purpose, main application context
not involved in testing.
I use DBUnit framework, it perform auto database population with necessary sample data before each test.
I wrote integration tests for basic application REST API. Spring MockMVC uses for that purpose.

Planes on 15.07.2017

- Testing
Write web UI test use Cucumber and Selenide

Done on 15.05.2017

- Web UI testing
Written 3 BDD testing scenarios uses Cucumber and Selenide.
Created feature file with scenarios and steps for it (Given, When, Then)
Configured test runner for using chrome driver and saving reports of tests' results in html format.
Implemented java test class with annotated methods by steps definitions.

Scenario 1. Open main page, go to link news list, verify that will be redirect on login form if no authorization.
Scenario 2. Input user credentials in login form, select checkbox "remember_me", check no errors visible, press submit
button, check redirect on news list page, check that login link is not visible and logout link is visible.
Scenario 3. Check that user was logged with "admin" username, go to news form, fill input news form with sample data and press
button for adding news, after check that inputted news added to news list.

Planes on 16.07.2017

- Study Jenkins.

Done on 16.05.2017

- Installed and configured Jenkins
In Jenkins I added job for monitoring my project on github.com
I use 2 kind of monitoring:
1) Monitoring by web-hook push. I add through Jenkins settings in my github account the web-hook and on every push to my
repository, github send request to Jenkins about it.
2) Jenkins every minute polls my repository on github on any happened changes.
After receive notification about changes in repository Jenkins start project building, which includes:
- start maven with transferred to it tasks like a compile, test, package and etc.
- if building ended with errors send email message to person which commit broken build.

Planes on 17.07.2017

- Read additional info about Jenkins
- Begin read about Sonar
